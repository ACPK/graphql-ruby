# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jekyll-algolia/all/jekyll-algolia.rbi
#
# jekyll-algolia-1.4.11
module Jekyll
end
module Jekyll::Commands
end
class Jekyll::Commands::Algolia < Jekyll::Command
  def self.init_with_program(prog); end
end
module Jekyll::Algolia
  def self.init(config = nil); end
  def self.load_overwrites; end
  def self.run; end
  def self.site; end
end
module Jekyll::Algolia::Configurator
  def self.algolia(key); end
  def self.api_key; end
  def self.application_id; end
  def self.assert_valid_credentials; end
  def self.config; end
  def self.default_extensions_to_index; end
  def self.default_files_to_exclude; end
  def self.disable_other_plugins(config); end
  def self.dry_run?; end
  def self.extensions_to_index; end
  def self.force_settings?; end
  def self.get(key); end
  def self.index_name; end
  def self.index_object_ids_name; end
  def self.init(config = nil); end
  def self.settings; end
  def self.verbose?; end
  def self.warn_of_deprecated_options; end
  include Jekyll::Algolia
end
module Jekyll::Algolia::ErrorHandler
  def self.error_hash(message); end
  def self.identify(error, context = nil); end
  def self.invalid_credentials?(error, _context = nil); end
  def self.invalid_index_name?(error, _context = nil); end
  def self.record_too_big_api?(error, _context = nil); end
  def self.stop(error, context = nil); end
  def self.too_many_records?(error, _context = nil); end
  def self.unknown_application_id?(error, _context = nil); end
  def self.unknown_setting?(error, context = nil); end
  include Jekyll::Algolia
end
module Jekyll::Algolia::Extractor
  def self.add_unique_object_id(record); end
  def self.extract_raw_records(content); end
  def self.run(file); end
  include Jekyll::Algolia
end
module Jekyll::Algolia::FileBrowser
  def self.absolute_path(filepath); end
  def self.allowed_extension?(file); end
  def self.categories(file); end
  def self.collection(file); end
  def self.date(file); end
  def self.excerpt_html(file); end
  def self.excerpt_raw(file); end
  def self.excerpt_text(file); end
  def self.excluded_from_config?(file); end
  def self.excluded_from_hook?(file); end
  def self.indexable?(file); end
  def self.is_404?(file); end
  def self.metadata(file); end
  def self.raw_data(file); end
  def self.redirect?(file); end
  def self.relative_path(filepath); end
  def self.slug(file); end
  def self.static_file?(file); end
  def self.tags(file); end
  def self.type(file); end
  def self.url(file); end
  def self.use_default_excerpt?(file); end
  include Jekyll::Algolia
end
module Jekyll::Algolia::Hooks
  def self.apply_all(records, context); end
  def self.apply_each(record, node, context); end
  def self.before_indexing_all(records, _context); end
  def self.before_indexing_each(record, _node, _context); end
  def self.should_be_excluded?(_filepath); end
end
module Jekyll::Algolia::Indexer
  def self.execute_operations(operations); end
  def self.index; end
  def self.index_exist?(index); end
  def self.index_object_ids; end
  def self.init; end
  def self.local_object_ids(records); end
  def self.local_setting_id; end
  def self.record_count(index); end
  def self.remote_object_ids; end
  def self.remote_object_ids_from_dedicated_index; end
  def self.remote_object_ids_from_main_index; end
  def self.remote_settings; end
  def self.run(records); end
  def self.set_settings(settings); end
  def self.set_user_agent; end
  def self.update_records(records); end
  def self.update_settings; end
  def self.warn_of_manual_dashboard_editing(changed_keys); end
  include Jekyll::Algolia
end
module Jekyll::Algolia::Logger
  def self.known_message(message_id, metadata = nil); end
  def self.log(input); end
  def self.silent; end
  def self.verbose(line); end
  def self.write_to_file(filename, content); end
end
module Jekyll::Algolia::ProgressBar
  def self.create(options); end
  def self.should_be_silenced?; end
  include Jekyll::Algolia
end
module Jekyll::Algolia::Shrinker
  def self.fit_to_size(raw_record, max_size); end
  def self.readable_largest_record_keys(record); end
  def self.size(record); end
  def self.stop_process; end
  def self.stop_with_error(record); end
  include Jekyll::Algolia
end
module Jekyll::Algolia::Utils
  def self.compact_empty(hash); end
  def self.diff_keys(alpha, beta); end
  def self.find_by_key(items, key, value); end
  def self.html_to_text(html); end
  def self.instance_of?(input, classname); end
  def self.jsonify(item); end
  def self.keys_to_symbols(hash); end
  def self.match?(string, regex); end
  def self.monkey_patch(instance, method, block); end
  def self.split_lines(input, max_length); end
end
class Jekyll::Algolia::MissingCredentialsError < StandardError
end
