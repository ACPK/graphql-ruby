# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby-prof/all/ruby-prof.rbi
#
# ruby-prof-0.17.0
class RubyProf::Measure::WallTime
  def self.measure; end
end
class RubyProf::Measure::CpuTime
  def self.frequency; end
  def self.measure; end
end
class RubyProf::Measure::ProcessTime
  def self.measure; end
end
class RubyProf::Measure::Allocations
  def self.measure; end
end
class RubyProf::Measure::Memory
  def self.measure; end
end
class RubyProf::Measure::GcTime
  def self.measure; end
end
class RubyProf::Measure::GcRuns
  def self.measure; end
end
class RubyProf::MethodInfo
  def <=>(other); end
  def aggregate_children; end
  def aggregate_parents; end
  def call_infos; end
  def called; end
  def calltree_name; end
  def children; end
  def children_time; end
  def eliminate!; end
  def full_name; end
  def klass; end
  def klass_name; end
  def line; end
  def method_id; end
  def method_name; end
  def min_depth; end
  def parents; end
  def recursive?; end
  def root?; end
  def self_time; end
  def source_file; end
  def source_klass; end
  def to_s; end
  def total_time; end
  def wait_time; end
  include Comparable
end
class RubyProf::CallInfo
  def add_self_time(arg0); end
  def add_total_time(arg0); end
  def add_wait_time(arg0); end
  def call_sequence; end
  def called; end
  def called=(arg0); end
  def children; end
  def children_time; end
  def depth; end
  def descendent_of(other); end
  def eliminate!; end
  def find_call(other); end
  def inspect; end
  def line; end
  def merge_call_tree(other); end
  def parent; end
  def parent=(arg0); end
  def recursive?; end
  def root?; end
  def self.roots_of(call_infos); end
  def self_time; end
  def stack; end
  def target; end
  def to_s; end
  def total_time; end
  def wait_time; end
end
class RubyProf::Thread
  def fiber_id; end
  def id; end
  def methods; end
  def top_call_infos; end
  def top_methods; end
  def total_time; end
  def wait_time; end
end
class RubyProf::Profile
  def exclude_common_methods!; end
  def exclude_method!(arg0, arg1); end
  def exclude_methods!(mod, *method_or_methods); end
  def exclude_singleton_methods!(mod, *method_or_methods); end
  def initialize(*arg0); end
  def pause; end
  def paused?; end
  def profile; end
  def resume; end
  def running?; end
  def self.profile(*arg0); end
  def start; end
  def stop; end
  def threads; end
  include RubyProf::Profile::LegacyMethodElimination
end
module RubyProf
  def self.cpu_frequency; end
  def self.disable_gc_stats_if_needed(was_enabled = nil); end
  def self.enable_gc_stats_if_needed; end
  def self.ensure_not_running!; end
  def self.ensure_running!; end
  def self.exclude_threads; end
  def self.exclude_threads=(value); end
  def self.figure_measure_mode; end
  def self.measure_allocations; end
  def self.measure_cpu_time; end
  def self.measure_gc_runs; end
  def self.measure_gc_time; end
  def self.measure_memory; end
  def self.measure_mode; end
  def self.measure_mode=(value); end
  def self.measure_mode_requires_gc_stats_enabled?; end
  def self.measure_mode_string; end
  def self.measure_process_time; end
  def self.measure_wall_time; end
  def self.pause; end
  def self.profile(options = nil, &block); end
  def self.resume; end
  def self.running?; end
  def self.start; end
  def self.start_script(script); end
  def self.stop; end
  extend RubyProf::DeprecationWarnings
end
class RubyProf::Profile::ExcludeCommonMethods
  def apply!; end
  def exclude_enumerable(mod, *method_or_methods); end
  def exclude_methods(mod, *method_or_methods); end
  def exclude_singleton_methods(mod, *method_or_methods); end
  def initialize(profile); end
  def self.apply!(profile); end
end
module RubyProf::Profile::LegacyMethodElimination
  def eliminate_methods!(matchers); end
  def eliminate_methods(methods, matcher); end
  def read_regexps_from_file(file_name); end
end
module Rack
end
class Rack::RubyProf
  def aggregate_requests?; end
  def call(env); end
  def delete_profiler!; end
  def initialize(app, options = nil); end
  def paths_match?(path, paths); end
  def profiler; end
  def should_profile?(path); end
end
class Rack::RubyProf::RackProfiler
  def default_printers; end
  def initialize(options); end
  def max_requests_reached?; end
  def pause; end
  def print!(prefix = nil); end
  def profiling_options; end
  def resume; end
end
module RubyProf::DeprecationWarnings
  def deprecation_warning(feature, recommendation = nil); end
end
class RubyProf::AbstractPrinter
  def editor_uri; end
  def initialize(result); end
  def method_name(method); end
  def min_percent; end
  def print(output = nil, options = nil); end
  def print_file; end
  def print_footer(thread); end
  def print_header(thread); end
  def print_thread(thread); end
  def print_threads; end
  def self.needs_dir?; end
  def setup_options(options = nil); end
  def sort_method; end
end
